import React, { useState, useEffect, useRef } from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import data from '../../data.json'; // Your actual data path

const statusColors = {
    Delivered: 'text-green-600 bg-green-100',
    Shipped: 'text-blue-600 bg-blue-100',
    Pending: 'text-yellow-600 bg-yellow-100',
    Cancelled: 'text-red-600 bg-red-100',
};

const statusFilters = ['All', 'Delivered', 'Shipped', 'Pending', 'Cancelled'];

const Inventory = () => {
    const [products, setProducts] = useState(data.products);
    const [searchTerm, setSearchTerm] = useState('');
    const [editIndex, setEditIndex] = useState(null);
    const [editProduct, setEditProduct] = useState({ productName: '', status: '' });
    const [selectedStatus, setSelectedStatus] = useState('All');
    const [currentPage, setCurrentPage] = useState(1);
    const productsPerPage = 10;
    const pdfRef = useRef();

    const handleDelete = (index) => {
        const updated = [...products];
        updated.splice(index, 1);
        setProducts(updated);
    };

    const handleEditClick = (index) => {
        setEditIndex(index);
        setEditProduct({
            productName: products[index].productName,
            status: products[index].status,
        });
    };

    const handleEditSave = () => {
        const updated = [...products];
        updated[editIndex] = {
            ...updated[editIndex],
            productName: editProduct.productName,
            status: editProduct.status,
        };
        setProducts(updated);
        setEditIndex(null);
    };

    // const generatePDF = async () => {
    //     const input = pdfRef.current;
    //     const clone = input.cloneNode(true);

    //     // Clean styling to avoid Tailwind colors bleeding into PDF
    //     const cleanStyles = (element) => {
    //         const elements = element.querySelectorAll('*');
    //         elements.forEach((el) => {
    //             el.style.color = '#000';
    //             el.style.backgroundColor = '#fff';
    //         });
    //     };
    //     cleanStyles(clone);

    //     // Header + Wrapper
    //     const wrapper = document.createElement('div');
    //     wrapper.style.padding = '16px';
    //     wrapper.style.backgroundColor = '#fff';

    //     const header = document.createElement('div');
    //     header.innerHTML = `
    //         <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;">
    //             <div><h2 style="margin:0;">Inventory Report</h2></div>
    //             <div style="font-size:12px;">${new Date().toLocaleString()}</div>
    //         </div>
    //         <div style="margin-bottom:8px;">Generated by: <strong>admin@example.com</strong></div>
    //         <hr style="margin:10px 0;" />
    //     `;
    //     wrapper.appendChild(header);
    //     wrapper.appendChild(clone);
    //     // document.body.appendChild(wrapper);

    //     const canvas = await html2canvas(wrapper, {
    //         useCORS: true,
    //         scale: 2,
    //     });

    //     const imgData = canvas.toDataURL('image/png');
    //     const pdf = new jsPDF('p', 'mm', 'a4');
    //     const pdfWidth = pdf.internal.pageSize.getWidth();
    //     const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

    //     pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
    //     pdf.save('inventory-report.pdf');

    //     // document.body.removeChild(wrapper);
    // };

    const generatePDF = async () => {
        const input = pdfRef.current;
        const clone = input.cloneNode(true);
    
        // Clean Tailwind colors (optional safety)
        const cleanStyles = (element) => {
            const elements = element.querySelectorAll('*');
            elements.forEach((el) => {
                el.style.color = '#000';
                el.style.backgroundColor = '#fff';
            });
        };
        cleanStyles(clone);
    
        // Create hidden container (not appended visibly)
        const wrapper = document.createElement('div');
        wrapper.style.padding = '16px';
        wrapper.style.backgroundColor = '#fff';
        wrapper.style.position = 'fixed';
        wrapper.style.left = '-9999px';
        wrapper.style.top = '0';
    
        const header = document.createElement('div');
        header.innerHTML = `
            <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;">
                <div><h2 style="margin:0;">Inventory Report</h2></div>
                <div style="font-size:12px;">${new Date().toLocaleString()}</div>
            </div>
            <div style="margin-bottom:8px;">Generated by: <strong>admin@example.com</strong></div>
            <hr style="margin:10px 0;" />
        `;
    
        wrapper.appendChild(header);
        wrapper.appendChild(clone);
        document.body.appendChild(wrapper); // Temporarily append for rendering
    
        const canvas = await html2canvas(wrapper, {
            useCORS: true,
            scale: 2,
        });
    
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF('p', 'mm', 'a4');
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
    
        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
        pdf.save('inventory-report.pdf');
    
        // Clean up immediately
        document.body.removeChild(wrapper);
    };
    
    const filteredProducts = products.filter((product) => {
        const matchesSearch = product.productName.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus = selectedStatus === 'All' || product.status === selectedStatus;
        return matchesSearch && matchesStatus;
    });

    const totalPages = Math.ceil(filteredProducts.length / productsPerPage);
    const paginatedProducts = filteredProducts.slice(
        (currentPage - 1) * productsPerPage,
        currentPage * productsPerPage
    );

    useEffect(() => {
        setCurrentPage(1); // Reset pagination on filter/search
    }, [searchTerm, selectedStatus]);

    return (
        <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-8">
            <div className="w-full bg-white shadow-lg rounded-lg p-6 max-w-6xl">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold">Inventory</h2>
                    <button
                        onClick={generatePDF}
                        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                    >
                        Download PDF
                    </button>
                </div>

                <div className="flex flex-col md:flex-row justify-between items-center mb-4 gap-4">
                    <input
                        type="text"
                        placeholder="Search by product name..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="border px-4 py-2 rounded shadow-sm focus:ring-2 focus:ring-blue-300 w-72"
                    />
                    <div className="flex flex-wrap gap-2">
                        {statusFilters.map((status) => (
                            <button
                                key={status}
                                onClick={() => setSelectedStatus(status)}
                                className={`px-4 py-1.5 rounded-md border text-sm font-medium ${selectedStatus === status
                                    ? 'bg-blue-100 border-blue-500 text-blue-800'
                                    : 'bg-gray-100 border-gray-300 text-gray-800 hover:bg-gray-200'
                                    }`}
                            >
                                {status}
                            </button>
                        ))}
                    </div>
                </div>

                <div ref={pdfRef} className="overflow-x-auto rounded-lg border">
                    <table className="w-full text-sm text-left text-gray-700">
                        <thead className="bg-gray-100">
                            <tr>
                                <th className="px-4 py-2 border-b">Sr. No.</th>
                                <th className="px-4 py-2 border-b">Product ID</th>
                                <th className="px-4 py-2 border-b">Product Name</th>
                                <th className="px-4 py-2 border-b">Category</th>
                                <th className="px-4 py-2 border-b">Status</th>
                                <th className="px-4 py-2 border-b">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {paginatedProducts.map((product, index) => (
                                <tr key={product.productId} className="hover:bg-gray-50">
                                    <td className="px-4 py-2 border-b">
                                        {(currentPage - 1) * productsPerPage + index + 1}
                                    </td>
                                    <td className="px-4 py-2 border-b">{product.productId}</td>
                                    <td className="px-4 py-2 border-b">{product.productName}</td>
                                    <td className="px-4 py-2 border-b">{product.category}</td>
                                    <td className="px-4 py-2 border-b">
                                        <span
                                            className={`px-2 py-1 rounded-full text-sm font-medium ${statusColors[product.status]}`}
                                        >
                                            {product.status}
                                        </span>
                                    </td>
                                    <td className="px-4 py-2 border-b whitespace-nowrap">
                                        <button
                                            onClick={() =>
                                                handleEditClick((currentPage - 1) * productsPerPage + index)
                                            }
                                            className="text-blue-600 hover:underline mr-2"
                                        >
                                            Edit
                                        </button>
                                        <button
                                            onClick={() =>
                                                handleDelete((currentPage - 1) * productsPerPage + index)
                                            }
                                            className="text-red-600 hover:underline"
                                        >
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {filteredProducts.length === 0 && (
                        <p className="text-center text-gray-500 py-4">No products found.</p>
                    )}
                </div>

                {filteredProducts.length > productsPerPage && (
                    <div className="flex justify-center items-center gap-2 mt-4">
                        <button
                            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                            disabled={currentPage === 1}
                            className="px-3 py-1.5 rounded bg-gray-200 hover:bg-gray-300 disabled:opacity-50"
                        >
                            Prev
                        </button>
                        {[...Array(totalPages)].map((_, i) => (
                            <button
                                key={i}
                                onClick={() => setCurrentPage(i + 1)}
                                className={`px-3 py-1.5 rounded ${currentPage === i + 1
                                    ? 'bg-blue-200 text-blue-800 font-semibold'
                                    : 'bg-gray-100 hover:bg-gray-200 text-gray-800'
                                    }`}
                            >
                                {i + 1}
                            </button>
                        ))}
                        <button
                            onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                            disabled={currentPage === totalPages}
                            className="px-3 py-1.5 rounded bg-gray-200 hover:bg-gray-300 disabled:opacity-50"
                        >
                            Next
                        </button>
                    </div>
                )}
            </div>

            {editIndex !== null && (
                <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 w-96 shadow-lg">
                        <h3 className="text-lg font-semibold mb-4">Edit Product</h3>
                        <div className="mb-4">
                            <label className="block text-sm font-medium mb-1">Product Name</label>
                            <input
                                type="text"
                                value={editProduct.productName}
                                onChange={(e) =>
                                    setEditProduct({ ...editProduct, productName: e.target.value })
                                }
                                className="w-full border rounded px-3 py-2 text-sm"
                            />
                        </div>
                        <div className="mb-4">
                            <label className="block text-sm font-medium mb-1">Status</label>
                            <select
                                value={editProduct.status}
                                onChange={(e) =>
                                    setEditProduct({ ...editProduct, status: e.target.value })
                                }
                                className="w-full border rounded px-3 py-2 text-sm"
                            >
                                <option>Delivered</option>
                                <option>Shipped</option>
                                <option>Pending</option>
                                <option>Cancelled</option>
                            </select>
                        </div>
                        <div className="flex justify-end gap-2">
                            <button
                                onClick={() => setEditIndex(null)}
                                className="bg-gray-200 text-gray-800 px-4 py-2 rounded"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={handleEditSave}
                                className="bg-blue-600 text-white px-4 py-2 rounded"
                            >
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Inventory;
